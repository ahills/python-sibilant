;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.

;; author: Christopher O'Brien  <obriencj@gmail.com>
;; license: LGPL v.3


;; === defines ===

(define-global defmacro
  (macro
   "defmacro"
   (function defmacro (name formals . body)
	     (doc "Defines a Macro instance in the current module")

	     (define proper (proper? formals))
	     `(define-global ,name
		((lambda (M) (set-attr M _proper ,proper) M)
		 (macro ,(str name) (function ,name ,formals ,@body)))))))


(defmacro defalias (name . body)
  (doc "Defines an Alias Macro in the current module")
  `(define-global ,name
     (alias ,(str name) (function ,name () ,@body))))


(defmacro defun (name params . body)
  (doc "Defines a function with the given name in the current module")
  `(define-global ,name (function ,name ,params ,@body)))


(defmacro defclass (name bases . body)
  (doc "Defines a class with the given name in the current module")
  `(define-global ,name (class ,name ,bases ,@body)))


;; === reader macros and atom matchers ===

(defmacro _reader_macro (sym attrsym)
  `(defmacro ,sym args
     `(try
       (unless (none? __reader__)
	 ((attr __reader__ ,',attrsym) ,@args))
       ((NameError as: ne) None))))

(_reader_macro read read)
(_reader_macro set-event-macro set_event_macro)
(_reader_macro get-event-macro get_event_macro)
(_reader_macro clear-event-macro clear_event_macro)
(_reader_macro temp-event-macro temp_event_macro)
(_reader_macro set-macro-character set_macro_character)
(_reader_macro temp-macro-character temp_macro_character)
(_reader_macro set-atom-pattern set_atom_pattern)
(_reader_macro get-atom-pattern get_atom_pattern)
(_reader_macro clear-atom-pattern clear_atom_pattern)
(_reader_macro set-atom-regex set_atom_regex)


;; === conditionals ===

(defmacro if (condition then: True else: False)
  `(cond (,condition ,then)
	 (else: ,else)))


(defmacro when (condition . body)
  `(cond (,condition ,@body)
	 (else: None)))


(defmacro unless (condition . body)
  `(cond (,condition None)
	 (else: ,@body)))


;; === math shortcuts ===

(defmacro incr (dest by: 1)
  `(setf ,dest (+ ,dest ,by)))


(defmacro decr (dest by: 1)
  `(setf ,dest (- ,dest ,by)))


;; === simple checks ===

(defmacro none? (value)
  `(is None ,value))


;; === imports ===

(defmacro defimport (modulename as-name: None)
  (doc "Import a module and bind it to the current scope")

  (unless (symbol? modulename)
    (raise (Exception (% "defimport module name must be a symbol, not %r"
			 modulename))))

  (unless (or (none? as-name) (symbol? as-name))
    (raise (Exception "defimpoy as-name: must be a symbol")))

  (when (none? as-name)
    (setq as-name (item (modulename.split "." 1) 0)))

  `(define ,as-name (import ,(str modulename) (globals))))


(defmacro defimportfrom (modulename . bindings)
  (doc "Import definitions from a module and bind them to the"
       "current scope")

  (unless (symbol? modulename)
    (raise (Exception (% "defimportfrom module name must be a symbol, not %r"
			 modulename))))

  (let ((coll (list))
	(current None)
	(member None)
	(byname None))

    (for-each (current bindings)

      ;; todo: use my cooler binding exploder
      (setq member (if (pair? current) (second current) current))
      (setq byname (if (pair? current) (first current) member))

      (list.append coll
       `(define ,byname
	  (attr (import ,(str modulename) (globals) None
			(build-list ,(str member)))
		,member))))

    `(begin ,@coll None)))


;; === runtime macroexpand ===

(defimportfrom sibilant.compiler
  (macroexpandq-1 macroexpand_1)
  (macroexpandq macroexpand)
  (simple-parameters simple_parameters))

;; the macros just snag globals and quote the source, then pass them
;; on to the quoted expanders imported above
(defmacro macroexpand-1 (source)
  `(macroexpandq_1 (globals) ',source))

(defmacro macroexpand (source)
  `(macroexpandq (globals) ',source))


;; === setf and general variables ===

(let ((*gv-forms* (dict)))

  (defun gv-define-setter-fn (name fn)
    (set-item *gv-forms* name fn)
    None)

  (defmacro gv-define-setter (name formals . body)
    `(gv-define-setter-fn
      ',name
      (lambda ,formals ,@body)))

  (defmacro gv-define-simple-setter (name setter)
    `(gv-define-setter
      ,name (dest val) `(,',setter ,@dest ,val)))

  (defmacro setf (target value)

    ;; since sibilant is designed to expand macros lazily, we need to
    ;; jump ahead a bit and make sure that our target gets expanded
    ;; right now so that we can find the right dispatch method.
    (setq target (macroexpandq None target))

    (cond
     ((symbol? target)
      (if (in (str target) ".")
	  (begin
	   (var spltrgt (target.rsplit "." 1))
	   `(set-attr ,(item spltrgt 0) ,(item spltrgt 1) ,value))
	`(setq ,target ,value)))

     ((and (proper? target) (in *gv-forms* (car target)))
      ((item *gv-forms* (car target)) (cdr target) value))

     (else:
      (raise (Exception (% "invalid setf target %s" target))))))

  None)


(begin
  (gv-define-simple-setter attr set-attr)
  (gv-define-simple-setter car set-car)
  (gv-define-simple-setter cdr set-cdr)
  (gv-define-simple-setter item set-item)
  (gv-define-simple-setter global define-global)
  (gv-define-setter caar (val x) `(set-car (car ,x) ,val))

  None)


(defmacro item-slice (sequence start: 'None stop: 'None step: 1)
  `(item ,sequence (slice ,start ,stop ,step)))


;; === def general targets ===

(let ((*gd-targets* (dict))
      (*gd-scopes* (dict)))

  (defun gd-define-scope-fn (key fn)
    (set-item *gd-scopes* key fn)
    None)

  (defmacro gd-define-scope (name formals . body)
    `(gd-define-scope-fn
      (keyword ,name)
      (lambda ,formals ,@body)))

  (defmacro gd-define-simple-scope (name setter)
    `(gd-define-scope
      ,name (dest val) `(,,setter ,dest ,val)))

  (defun gd-define-target-fn (name fn)
    (set-item *gd-targets* name fn)
    None)

  (defmacro gd-define-target (name formals . body)
    `(gd-define-target-fn
      (symbol ',name)
      (lambda ,formals ,@body)))

  (defmacro gd-define-simple-target (name factory)
    `(gd-define-target ,name (setter source)
		       (setter (item source 0)
			       `(,,factory ,@source))))

  (defmacro def source
    (let ((scope ':local)
	  (target None)
	  (d-scope None)
	  (d-target None))

      (if (keyword? (item source 0))
	  then: (setq-values (scope target . source) source)
	  else: (setq-values (target . source) source))

      (setq d-scope (dict.get *gd-scopes* scope None))
      (when (none? d-scope)
	(raise (Exception (% "undefined def scope %r" scope))))

      (setq d-target (dict.get *gd-targets* target None))
      (when (none? d-target)
	(raise (Exception (% "undefined def target %r" target))))

      (d-target d-scope source)))

  None)

(begin
 (gd-define-simple-scope ':local 'define)
 (gd-define-simple-scope ':global 'define-global)
 ;; todo: thread-local

 None)

(begin
 (gd-define-simple-target function 'function)
 (gd-define-simple-target class 'class)
 ;; todo: import

 None)


;; === flet and values ===

(defmacro labels (declarations . body)
  `(let (,@(map (lambda (d) `(,(car d) None)) declarations))
     ,@(map (lambda (d) `(def function ,@d)) declarations)
     ,@body))


(defmacro flet (declarations . body)
  `(let (,@(map (lambda (d) `(,(car d) (lambda ,@(cdr d)))) declarations))
     ,@body))


(defmacro vars (*: variables)
  (doc "
  (vars BINDINGS...)

  where each BINDING is either a symbol or a pair in (SYM EXPR)
  format. Declares each binding symbol in the current scope, and
  optionally assigns it the value from EXPR
  ")

  `(begin ,@(map (lambda (d)
		   (if (symbol? d)
		       then: `(var ,d)
		       else: `(var ,@d)))
		 variables)))


(defmacro let-values (bind_vals . body)
  (doc "
  (let-values (BINDINGS VALS) . BODY)

  where BINDINGS is a nested pair of symbols in the same structure as
  values from VALS.
  ")

  `(let ()
     (define-values ,@bind_vals)
     ,@body))


;; === c_r magic ===

;; (defmacro c__r (atom)
;;   (unless (is str (type atom))
;;     (raise (Exception (% "what happened in c__r: %r" atom))))

;;   (define sb (attr (import "sibilant.builtins") builtins))
;;   (define sd sb.__dict__)

;;   (define found (dict.get sd atom None))

;;   (when (none? found)
;;     (define calls (reduce (lambda (cell atom-char)
;; 				  (cons (if (eq "a" atom-char) 'car 'cdr)
;; 					cell))
;; 				(item atom (slice -2 1 -1))
;; 				nil))

;;     (setq found
;; 	  (macro atom
;; 		 (lambda (value)
;; 		   `(,(if (eq "a" (item atom 1)) 'car 'cdr)
;; 		     (reduce (lambda (x y) (y x)) (values ,@calls)
;; 			     ,value)))))

;;     (print (found.expand 'TACO))

;;     (setf (item sd atom) found)
;;     None)

;;   (symbol atom))


;; (set-atom-regex 'c__r "c[ad]{2,}r" (lambda (atom) `(c__r ,atom)))

;; (defalias first 'car)
;; (defalias second 'cadr)
;; (defalias third 'caddr)
;; (defalias fourth 'cadddr)
;; (defalias fifth 'caddddr)
;; (defalias sixth 'cadddddr)
;; (defalias seventh 'caddddddr)


;; === python object system classes ==

(defmacro class (name bases . body)
  (doc "
  (class NAME (parents... ) . BODY)

  Create a new python type instance with the given name, and parent
  class inheritance. The expressions of BODY are evaluated in order in
  their own local scope. The resulting locals are used to define the
  class members (functions, fields, etc.)

  Use (def class NAME (parents... ) . BODY) to bothe create and bind
  the class in the local namespace.
  ")

  `(flet ((create-class (name fields *: bases metaclass: type)
			(metaclass name bases fields))
	  (create-fields (__module__) (begin ,@body) (locals)))

     (create-class ,(str name)
		   (create-fields __name__)
		   ,@bases)))


(defmacro compile (source env: '(globals) filename: "<anon>")
  (doc "
  (compile SOURCE)

  Returns a python code object

  SOURCE may be one of the following:
   * IOBase stream from which to read and compile a single expression
   * str from which to parse and compile a single expression
   * cons pair representing source forms
   * symbol or keyword object

  (compile SOURCE env: DICT filename: \"filename.lspy\")

  Compiles SOURCE with DICT as the globals, with the source filename
  set to filename.lspy
  ")

  `(let ((src ,source) (glbls ,env) (fname ,filename))
     (defimportfrom io IOBase)
     (defimportfrom sibilant.parse
       source_stream source_str)
     (defimportfrom sibilant.module
       fake_module_from_env init_module parse_time compile_time)

     (define stream
       (cond ((isinstance src str) (source_str src fname))
	     ((isinstance src IOBase) (source_stream src fname))
	     ((or (pair? src) (symbol? src) (keyword? src))
	      None)
	     (else: src)))

     (define mod (fake_module_from_env glbls))
     (init_module mod stream None fname)

     (unless (or (pair? src) (symbol? src) (keyword? src))
       (setq src (parse_time mod)))

     (compile_time mod src)))


(defmacro eval (source env: '(globals) filename: "<anon>")
  (doc "
  (eval SOURCE)

  Evaluates SOURCE with the current globals.

  SOURCE may be one of the following:
   * Python code object
   * IOBase stream from which to read and compile a single expression
   * str from which to parse and compile a single expression
   * cons pair representing source forms
   * symbol or keyword object

  (eval SOURCE env: DICT filename: \"filename.lspy\")

  Evaluates SOURCE with DICT as the globals, with the source filename
  set to filename.lspy
  ")

  `(let ((src ,source) (glbls ,env) (fname ,filename))
     (defimportfrom io IOBase)
     (defimportfrom types CodeType)
     (defimportfrom sibilant.parse
       source_stream source_str)
     (defimportfrom sibilant.module
       fake_module_from_env init_module parse_time compile_time run_time)

     (cond
      ((isinstance src CodeType) (py-eval src glbls fname))

      (else:
       (define stream
	 (cond ((isinstance src str) (source_str src fname))
	       ((isinstance src IOBase) (source_stream src fname))
	       ((or (pair? src) (symbol? src) (keyword? src))
		None)
	       (else: src)))

       (define mod  (fake_module_from_env glbls))
       (init_module mod stream None ,filename)

       (unless (or (pair? src) (symbol? src) (keyword? src))
	 (setq src (parse_time mod)))

       (run_time mod (compile_time mod src))))))


;; === generator stuff ===

(defmacro send (iterator value)
  `((attr ,iterator send) ,value))


;;
;; The end.
