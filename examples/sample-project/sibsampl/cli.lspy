;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(defimport sys)

(defimport timeit)

(defimportfrom argparse
  ArgumentParser
  _AppendAction _AppendConstAction
  _StoreAction _StoreConstAction)

(defimportfrom functools lru_cache)

(defimportfrom os.path basename)

(defimportfrom sibsampl
  pyfibonacci_lru
  pyfibonacci_notc
  pyfibonacci_while)


;; these might be good in builtins, they're nearly perfect analogues for
;; generator expressions and list-comprehensions

(defmacro iter-each (bindings emit when: None unless: None)
  (doc
   "(iter-each (BINDINGS SEQUENCE) EXPRESSION)"
   "(iter-each (BINDINGS SEQUENCE) EXPRESSION when: WHENTEST)"
   "(iter-each (BINDINGS SEQUENCE) EXPRESSION unless: UNLESSTEST)"
   ""
   "Produces an iterator which will yield the result of EXPRESSION,"
   "which is evaluated with the BINDINGS unpacked from each value from"
   "iterating over SEQUENCE. The optional when and unless forms may"
   "be specified as predicate expressions to be evaluated on each"
   "iteration to determine if the given values should be skipped.")

  (setq emit `(yield ,emit))
  (when unless (setq emit `(unless ,unless ,emit)))
  (when when (setq emit `(when ,when ,emit)))
  `(let () (for-each ,bindings ,emit)))

(defmacro list-each params
  (doc
   "Like iter-each, but accumulates the result into a Python list")
  `(list (iter-each ,@params)))

;; (iter-each ((a b) (something)) (+ a b) unless: (nil? a))


;; the natural, tail-call recursive impl
(def function fibonacci (index carry: 0 accu: 1)
  (if (== index 0) then: carry
      else: (fibonacci (- index 1) accu (+ accu carry))))


;; recursive, but no tailcall
(def function fibonacci_notc (index carry: 0 accu: 1)
  (var result)
  (if (== index 0)
      then: (setq result carry)
      else: (setq result (fibonacci_notc (- index 1) accu (+ accu carry))))
  result)


;; non-tailcall, memoized fibonacci implementation.
(define fibonacci_lru

  (define fibonacci_
    ((lru_cache 10000)
     ;; note to self: I really need to add a way to do pythonic decorators
     ;; with my (def function ...) syntax

     (lambda (index)
       (if (< index 2) then: index
	   else: (+ (fibonacci_ (- index 1)) (fibonacci_ (- index 2)))))))

  (function fibonacci_lru (index)
	    ;; since the purpose here is in timing things, we need to
	    ;; make sure to clear the lru_cache between invocations.
	    (fibonacci_.cache_clear)
	    (fibonacci_ index)))


;; tail-call optimized BUT NOT RECURSIVE (had to make two functions to
;; make that happen). This will not run out of stack space thanks to
;; the trampoline, but it's also going to be slow because of all those
;; bounces.
(define fibonacci_tco
  (labels
      ((fib-1 (index carry accu)
	      (if (== index 0) then: carry
		  else: (fib-2 (- index 1) accu (+ accu carry))))
       (fib-2 (index carry accu)
	      (if (== index 0) then: carry
		  else: (fib-1 (- index 1) accu (+ accu carry)))))

    (function fibonacci_tco (index)
	      (fib-1 index 0 1))))


;; looping version
(def function fibonacci_while (index)
  (vars (carry 0) (accu 1))

  (while (< 0 index)
    (setq-values
     (index carry accu)
     (values (- index 1) accu (+ accu carry)))
    carry))


(def function funtime (fib value loops)
     (try
      (timeit.timeit stmt: (partial fib value)
		     number: loops)
      ((BaseException as: be) (print be) 0.0)))


(define fmt
  (attr
   "{title} over {num} loops -> {secs:7.4f} seconds ({percent:0.2f}% runtime)"
   format))


(def function time-fibs (value loops *: fibs)
     (var results (list-each (fib (map second fibs))
			     (funtime fib value loops)))
     (var total (apply + results))
     (var count (len results))

     (for-each ((index (title fib)) (enumerate fibs))
	       (var secs (item results index))
	       (print (fmt title: title num: loops
			   secs: secs
			   percent: (/ secs total)))))


(def function cli-command-timeit (options)
  (defimportfrom sys getrecursionlimit setrecursionlimit)

  (vars (f options.of) (n options.times) (l options.limit))

  (vars
   (d0 (try (fibonacci_lru f) ((BaseException) None)))
   (d1 (fibonacci_while f))
   (d2 (fibonacci_tco f))
   (d3 (fibonacci f)))

  (vars
   (p0 (try (pyfibonacci_lru f) ((BaseException) None)))
   (p1 (pyfibonacci_while f))
   (p2 (try (pyfibonacci_notc f) ((BaseException) None))))

  ;; kinda wish I had assert...
  ;; TODO implement 'assert'
  (unless (and (== d1 d2) (== d1 d3) (== d1 p1)
	       (or (none? d0) (== d0 d1)))
    (raise (Exception "SHIT BROKE")))

  (print (% "calculating fibonacci of %r" f))
  (print (% "answer is %r" d1))

  (var old-limit (getrecursionlimit))
  (when l
    (setrecursionlimit (+ old-limit l))
    (print (% "increased recursion limit from %i to %i"
	      (values old-limit (+ old-limit l)))))

  (time-fibs f n
   `("fibonacci with TCR   " ,fibonacci)
   `("fibonacci with TCO   " ,fibonacci_tco)
   `("fibonacci no TC      " ,fibonacci_notc)
   `("fibonacci LRU        " ,fibonacci_lru)
   `("fibonacci loop       " ,fibonacci_while)
   `("fibonacci py LRU     " ,pyfibonacci_lru)
   `("fibonacci py no TC   " ,pyfibonacci_notc)
   `("fibonacci py loop    " ,pyfibonacci_while))

  (setrecursionlimit old-limit)
  None)


(def function cli-subp-timeit (parent)
  (var subp (subparser
	     parent "timeit"
	     cli-func: cli-command-timeit))

  (subp.add_argument "--times" action: "store" type: int
		     help: "calculate this many times (default 1000)"
		     default: 1000)

  (subp.add_argument "--of" action: "store" type: int
		     help: "calculate fibonacci of (default 2000)"
		     default: 2000)

  (subp.add_argument "--limit" action: "store" type: int
		     help: "increate recursion limit (default 0)"
		     default: 0)

  subp)


(def function create-option-parser (argv)
  (doc "the sibapp CLI argument parser")

  (var parser (ArgumentParser
	       prog: (basename (item argv 0))
	       description: "This is sibapp"))

  ;; set the default command handler to print out help
  (parser.set_defaults
   cli-func: (lambda (options)
	       (parser.print_usage sys.stderr)
	       1))

  (cli-subp-timeit parser)

  parser)


(define _inherit_actions
  (values _AppendAction _AppendConstAction
	  _StoreAction _StoreConstAction))


(def function subparser (parser name cli-func: None help: None)
  ;; argparse has some crap behaviour that I regularly find myself
  ;; needing to override with this function. I should really move this
  ;; into a sibilant.site.argparse module...

  (var subs
    (if parser._subparsers
	then: (item parser._subparsers._actions -1)
	else: (parser.add_subparsers)))

  (var sp
    (subs.add_parser (str name)
		     help: help
		     description: help))

  (for-each (act parser._subparsers._actions)
	    (when (isinstance act _inherit_actions)
	      (sp._add_action act)))

  (sp._defaults.update parser._defaults)

  (when (none? cli-func)

    ;; this sub command doesn't have an actual function to run, so
    ;; let's make a help function specific for it to be called instead
    (setq cli-func (lambda (options)
	 (sp.print_usage sys.stderr)
	 1)))

  (sp.set_defaults cli-func: cli-func)

  sp)


(def function main (argv: None)
  (doc "entry point for the sibapp CLI")

  ;; grab sys.argv if we aren't given something else
  (when (none? argv) (setq argv sys.argv))

  (var parser (create-option-parser argv))
  (var options (parser.parse_args
		(item-slice argv 1)))

  (try
   (options.cli-func options)

   ((KeyboardInterrupt as: ki)
    (print file: sys.stderr)
    130)

   (else: 0)))


(when (eq __name__ "__main__")
  (sys.exit (main)))


;; The end.
