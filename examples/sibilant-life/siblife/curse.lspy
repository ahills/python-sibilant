;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(defimportfrom sys stderr)

(defimportfrom curses
  wrapper
  mousemask BUTTON1_CLICKED
  KEY_UP KEY_DOWN KEY_LEFT KEY_RIGHT)

(defimportfrom itertools product repeat)
(defimportfrom time sleep)

(defimportfrom siblife.life LifeBoard)


(define smilies
  (values "\U0001f615"
	  "\U0001f610"
	  "\U0001f642"
	  "\U0001f600"
	  "\U0001f60e"))


(def function smilie-renderer (cell)
     (if cell
	 then: (values (item smilies (% cell (len smilies))) 0)
	 else: (values " " 0)))


(def function make-char-renderer (alive: "O" dead: " ")
     (setf alive (item alive 0))
     (setf dead (item dead 0))
     (lambda (cell)
       (if cell
	   then: (values alive 0)
	   else: (values dead 0))))


(def function digit-renderer (cell)
     (when (< 9 cell) (setq cell 9))
     (values (if cell (str cell) " ") 0))


(def function get-renderer (by-name)
     (cond
      ((== by-name "smilies")
       smilie-renderer)

      ((== by-name "digits")
       digit-renderer)

      (else:
       (make-char-renderer))))


(def class LifeScreen (object)

     (def method __init__ (self screen wrap: False renderer: None)

	  (when (none? renderer)
	    (setf renderer (make-char-renderer)))
	  (setf self.renderer renderer)

	  (vars height width)
	  (setq-values (height width) (screen.getmaxyx))

	  (setf self.width (- width 2))
	  (setf self.height (- height 2))

	  (setf self.screen screen)

	  (setf self.board (LifeBoard self.width self.height wrap))
	  (setf self.age self.board.age)
	  (setf self.clear self.board.clear)
	  (setf self.randomize self.board.randomize)
	  (setf self.toggle self.board.toggle)

	  None)


     (def method display (self)
	  (var board self.board)
	  (var render self.renderer)
	  (var screen self.screen)

	  (vars cell style)

	  (for-each (((x y) value) (board.tracked cleanup: True))
		    (setq-values (cell style) (render value))
		    (screen.attrset style)
		    (try
		     (screen.addch (+ 1 y) (+ 1 x) cell)
		     ((Exception as: e)
		      (raise (Exception (% " x: %r, y: %r, cell: %r"
					   (values x y cell))))))

		     None)

	  (screen.refresh))

     None)


(def function erase-menu (stdscr menu-y)
     (stdscr.move menu-y 0)
     (stdscr.clrtoeol)

     (stdscr.move (+ menu-y 1) 0)
     (stdscr.clrtoeol)

     None)


(def function display-menu (stdscr menu-y)
     (erase-menu stdscr menu-y)

     (stdscr.addstr
      menu-y 4
      "Use the cursor keys to move, space or Enter to toggle cells")

     (stdscr.addstr
      (+ menu-y 1) 4
      "E)rase the board, R)andom fill, S)tep, C)ontinuous, Q)uit")

     (stdscr.attrset 0)

     None)


(def function step (stdscr board)
     (stdscr.addstr 0 0 "/")
     (stdscr.refresh)

     (board.age)
     (board.display)

     (stdscr.addstr 0 0 "\\")
     (stdscr.refresh)

     None)


(def function multi-step (stdscr board menu-y counter)

     (erase-menu stdscr menu-y)
     (stdscr.addstr menu-y 6 " Hit any key to stop and redraw ")

     (stdscr.refresh)
     (stdscr.nodelay 1)

     (for-each (index (range 1 (+ 1 counter)))
	       (stdscr.addstr 0 0 (str index))
	       (stdscr.refresh)
	       (board.age)

	       (unless (== -1 (stdscr.getch))
		 (break)))

     (board.display)

     (stdscr.nodelay 0)
     (display-menu stdscr menu-y)

     None)


(def function continuous-mode (stdscr board menu-y)

     (erase-menu stdscr menu-y)
     (stdscr.addstr menu-y 6 " Hit any key to stop ")

     (stdscr.refresh)
     (stdscr.nodelay 1)

     (while (== -1 (stdscr.getch))
       (step stdscr board)
       (sleep 0.1))

     (stdscr.nodelay 0)
     (display-menu stdscr menu-y)

     None)


(def function curses-main (stdscr options)

     (stdscr.clear)

     (vars y x)
     (setq-values (y x) (stdscr.getmaxyx))
     (var menu-y (- y 2))

     (var board-window (stdscr.subwin (- y 1) x 0 0))
     (var renderer (get-renderer options.renderer))
     (var board (LifeScreen board-window options.wrap renderer))

     (display-menu stdscr menu-y)
     (board.display)

     (vars (y-pos (// y 2)) (x-pos (// x 2)))

     (while True
       (setq y-pos (% y-pos board.height))
       (setq x-pos (% x-pos board.width))
       (stdscr.move (+ 1 y-pos) (+ 1 x-pos))

       (var event (stdscr.getch))

       (cond
	((and (< 0 event) (< event 256))
	 (setq event (chr event))

	 (cond
	  ((in " \n" event)
	   (board.toggle x-pos y-pos)
	   (board.display))

	  ((in "Cc" event)
	   (continuous-mode stdscr board menu-y))

	  ((in "Ee" event)
	   (board.clear)
	   (board.display))

	  ((in "Qq" event)
	   (break))

	  ((in "Rr" event)
	   (board.randomize)
	   (board.display))

	  ((in "Ss" event)
	   (step stdscr board))

	  ((in "1234567890" event)
	   (multi-step stdscr board menu-y
		       (** 10 (str.index "1234567890" event))))

	  (else: None)))

	((== event KEY_UP)
	 (decr y-pos))

	((== event KEY_DOWN)
	 (incr y-pos))

	((== event KEY_LEFT)
	 (decr x-pos))

	((== event KEY_RIGHT)
	 (incr x-pos))

	(else: None))
       None)

     None)


(def function main (options)
     (wrapper curses-main options))


;;
;; The end.
