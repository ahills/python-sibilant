#! /usr/bin/env sibilant

;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(def import-from flask Flask escape)
(def import-from werkzeug.routing parse_rule)


(defmacro url-rule [name rule . body]
  (define formals
    (iter-each [[converter _ignored name] (parse_rule (str rule))]
	       (symbol name) unless: (None? converter)))

  `(app.add_url_rule
    ,(str rule)
    endpoint: ,(str name)
    view_func: (function ,name (,@formals) ,@body)))


(defmacro template strings
  `(str.format
    (str.join " " (map str (#tuple ,@strings)))
    **: (locals)))


(defmacro declare-app [name]
  " Flask wants its application to be named app "
  `(define app (Flask ,(str name))))


;;;


(declare-app simple-flask)


(url-rule
 index /

 (define lcls (escape (locals)))
 (template
  "<p>This is a simple web app. What more do you want?</p>"
  "<code>{lcls}</code>"))


(url-rule
 reverse-words /reverse/<words>

 (var [rwords (escape (item-slice words step: -1))]
      [words (escape words)]
      [lcls (escape (locals))])

 (#str
  "<code>\n"
  "<p>\U0001f615 Original: " words "</p>\n"
  "<p>\U0001f60e Reversed: " rwords "</p>\n"
  "<p>Locals: " lcls "</p></code>\n"))


;; you can either run this directly, or you can compile it to a .pyc
;; and invoke it from the flask cli
(when-main
 (app.run))


;;
;; The end.
