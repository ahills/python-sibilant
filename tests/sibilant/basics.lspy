;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(def import-from unittest TestCase)


(def class DefclassTest (TestCase)

     (def function test_def_class (self)

	  (def class simple (object)
	       (def function __init__ (self foo: 100)
		    (setf self.foo foo))

	       (def function get-foo (self) self.foo))

	  (var sinst (simple))

	  (self.assertIs (type simple) type)
	  (self.assertIs (type sinst) simple)
	  (self.assertEqual sinst.foo (sinst.get-foo))

	  None)

     None)


(def class LabelsTest (TestCase)

     (def function test_even_odd (self)

	  (labels
	      ((even (x) (if (== x 0) then: True else: (odd (- x 1))))
	       (odd (x) (if (== x 0) then: False else: (even (- x 1)))))

	    (self.assertTrue (even 100))
	    (self.assertTrue (odd 101))
	    (self.assertFalse (even 101))
	    (self.assertFalse (odd 100))

	    None)
	  None)


     (def function test_shadowed (self)

	  ;; create a function which definitely raises
	  (def function someone () (raise Exception))
	  (self.assertRaises Exception someone)

	  ;; now shadow that function in labels, and call the same
	  ;; name from another labels function
	  (labels
	      ((foo () (someone))
	       (someone () "Happy"))

	    ;; foo should see the shadowed copy
	    (self.assertEqual (foo) "Happy")

	    ;; so should this body
	    (self.assertEqual (someone) "Happy")

	    None)
	  None)

     None)


(def class FLetTest (TestCase)

     (def function test_shadowed (self)

	  ;; create a function which definitely raises
	  (def function someone () (raise Exception))
	  (self.assertRaises Exception someone)

	  ;; now shadow that function in labels, and call the same
	  ;; name from another labels function
	  (flet
	      ((foo () (someone))
	       (someone () "Happy"))

	    ;; foo sees the original copy of someone
	    (self.assertRaises Exception foo)

	    ;; however, this body sees the shadowed copy
	    (self.assertEqual (someone) "Happy")

	    None)

	  None)

     None)


(def class BuildTest (TestCase)

     (def function test_build_list (self)
	  (var data (build-list 1 2 "hello" 'foo ':bar))

	  (self.assertTrue (list? data))
	  (self.assertEqual (len data) 5)

	  (self.assertEqual (item data 0) 1)
	  (self.assertEqual (item data 1) 2)
	  (self.assertEqual (item data 2) "hello")
	  (self.assertEqual (item data 3) 'foo)
	  (self.assertEqual (item data 4) ':bar)

	  None)


     (def function test_build_tuple (self)
	  (var data (build-tuple 1 2 "hello" 'foo ':bar))

	  (self.assertTrue (tuple? data))
	  (self.assertEqual (len data) 5)

	  (self.assertEqual (item data 0) 1)
	  (self.assertEqual (item data 1) 2)
	  (self.assertEqual (item data 2) "hello")
	  (self.assertEqual (item data 3) 'foo)
	  (self.assertEqual (item data 4) ':bar)

	  None)


     (def function test_build_dict (self)
	  (var data (build-dict
		     ("foo" 100)
		     ("bar" 200)
		     ('tacos "yummy")
		     (None 'wut)))

	  (self.assertTrue (dict? data))
	  (self.assertEqual (len data) 4)

	  (self.assertEqual (item data "foo") 100)
	  (self.assertEqual (item data "bar") 200)
	  (self.assertEqual (item data 'tacos) "yummy")
	  (self.assertEqual (item data None) 'wut)

	  None)


     (def function test_build_set (self)
	  (var data (build-set 1 2 3 4 1 2 3 4 5))

	  (self.assertTrue (set? data))
	  (self.assertEqual (len data) 5)
	  (self.assertTrue (in data 1))
	  (self.assertTrue (in data 2))
	  (self.assertTrue (in data 3))
	  (self.assertTrue (in data 4))
	  (self.assertTrue (in data 5))

	  None)

     None)


;;
;; The end.
